---

- user: bruce
  versions:
    - name: sql_start


- required_versions: [sql_start]
  user: bruce
  frames:
    - frame_name: sql_engine
      database: $sql_database
      schema: $sql_schema
      table: $sql_table
      column: $sql_column
      type: $sql_type

    - frame_name: sql_database
      schema: $sql_schema
      table: $sql_table
      column: $sql_column

    - frame_name: sql_schema
      seperator: "\n"
      create_ddl: |
        `CREATE SCHEMA {{ frame.schema_name }};
      drop_ddl: |
        `DROP SCHEMA {{ frame.schema_name }} CASCADE;

    - frame_name: sql_table
      seperator: "\n"
      create_ddl: |
        `CREATE{{ context.render(generator.pre_table, frame) | space}} TABLE {%
           if frame.schema_name is defined and
              frame.schema_name != generator.default_schema -%}
              {{ frame.schema_name }}.
        {%- endif %}{{ frame.table_name }}{{ context.render(generator.post_table_name, frame) | space }}
        {%- if frame.column is defined %} (
        {{ context.create(frame.column) }}
        )
        {%- endif %}
        {{ context.render(generator.after_columns, frame) | space }};
      pre_table: |
        {%- if frame.temporary | default('0') | int %} TEMPORARY 
        {%- endif %}
      post_table_name: null
      after_columns: null
      drop_ddl: |
        `DROP TABLE
         {%- if frame.schema_name is defined and
                frame.schema_name != generator.default_schema %} {{ frame.schema_name }}.
         {%- endif %}{{ frame.table_name }};

    - frame_name: sql_column
      seperator: ",\n"
      create_ddl: |
        `    {{ frame.name }} {{
                context.render(engine.type | attr(frame.type), frame) }}
        {%- if frame.collate is defined %} COLLATE {{ frame.collate }}
        {%- endif %}
        {%- if frame.primary_key | int %} PRIMARY KEY
        {%- endif %}
        {%- if not (frame.nullable | int) %} NOT NULL
        {%- endif %}
        {%- if frame.check_foreign_key | int %} REFERENCES {{ frame.links_to }}
        {%- endif %}
      drop_ddl: |
        `ALTER TABLE -- how to access the table I'm in?

    - frame_name: sql_type
      integer: |
        `{% if frame.bit_size is defined %}
          {%- if frame.bit_size == 16 -%}
          smallint
          {% elif frame.bit_size == 32 -%}
          integer
          {% elif frame.bit_size == 64 -%}
          bigint
          {%- else -%}
          **ERROR** unrecognized bit_size {{ frame.bit_size }} **ERROR**
          {%- endif %}
        {% else -%}
          integer
        {%- endif %}
      float: |
        `{% if frame.bit_size is defined %}
          {%- if frame.bit_size == 32 -%}
          real
          {% elif frame.bit_size == 64 -%}
          double precision
          {% else -%}
          **ERROR** unrecognized bit_size {{ frame.bit_size }} **ERROR**
          {%- endif %}
        {% else -%}
          double precision
        {%- endif %}
      decimal: |
        `{% if frame.num_digits is defined %}
          {%- if frame.num_decimals is defined -%}
            decimal({{ frame.num_digits }}, {{ frame.num_decimals }})
          {% else -%}
            decimal({{ frame.num_digits }})
          {%- endif %}
        {% elif frame.num_decimals is defined -%}
          **ERROR** must specify num_digits if num_decimals specified **ERROR**
        {% else -%}
        decimal
        {%- endif %}
      boolean: boolean
      string: |
        `{% if frame.max_len is defined -%}
          varchar({{ frame.max_len }})
        {%- else -%}
          varchar
        {%- endif %}
      timestamp: |
        `{% if frame.fractional_second_digits is defined -%}
          timestamp({{ frame.fractional_second_digits }})
        {%- else -%}
          timestamp
        {%- endif %}
        {% if frame.with_time_zone is defined and frame.with_time_zone %} with time zone
        {%- endif %}

    - frame_name: sqlite3
      ako: $sql_engine
      schema:
        ako: $sql_schema
        default_schema: main
        builtin_schemas: [main, temp]
        supports_schemas: False
      table:
        ako: $sql_table
        after_columns: |
          `{%- if not (frame.with_rowid | default(true) | int) %} WITHOUT ROWID
          {%- endif %}

    - frame_name: postgresql
      ako: $sql_engine
      default_schema: public
      builtin_schemas: [public]
      supports_schemas: True

    - frame_name: oracle
      ako: $sql_engine

